"""
Задача №2. Решение в группах
Планеты вращаются вокруг звезд по эллиптическим орбитам.
Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. Напишите функцию
find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая
планета. Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники
были были запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины полуосей
эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее
эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи
используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую
большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая
планета ровно одна

Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))
Вывод:
2.5 10

"""
import math

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]


# Решение через именные функции
def square_of_orbits(lst, num_pi=math.pi):  # функция определения занчения площадей орбит планет
    square_lst = []  # список итоговых значений
    num_pi = math.pi  # число пи
    for el in lst:  # для каждого элемента списка, а элемент - это кортеж
        square_lst.append(el[0] * el[1] * num_pi)  # находим значение площади и вносим в итоговый список
    return square_lst


def find_farthest_orbit(lst1, s_lst, num_pi=math.pi):  # функция определения самой удаленной орбиты
    biggest_square = max(s_lst)  # максимальное значение списка площадей орбит планет
    biggest_orbit = 0  # значения полуосей орбит, которые дали наибольшую площадь
    for element in lst1:
        if element[0] * element[1] * num_pi == biggest_square:  # если значение площади равно biggest_square, то
            biggest_orbit = element  # это элемент(кортеж), который дает наибольшее значение площади орбиты
    return biggest_orbit


print('=' * 50)
# вызываем функции и выводим результат
print('Орбита самой далекой планеты:', *find_farthest_orbit(orbits, square_of_orbits(orbits)))
print('=' * 50)

# Решение с анонимными функциями и функциями высшего порядка
num_pi = math.pi  # число пи
sq_orbits2 = list(map(lambda el: el[0] * el[1] * num_pi, orbits))  # определяем занчения площадей орбит планет
sq_orbits = list(map(lambda every: round(every, 7), sq_orbits2))  # округляем float до 7 знаков
biggest_square = max(sq_orbits)  # находим максимальное значение в списке площадей
biggest_square_idx = sq_orbits.index(biggest_square)  # определяем индекс макс значения в списке площадей
print('Площади орбит:', sq_orbits)
print('Орбита самой далекой планеты:', *orbits[biggest_square_idx])
